apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVRRENDQXlpZ0F3SUJBZ0lKQU1RaWV3RlRWWnM5TUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVFzd0NRWUQKVlFRR0V3SlZVekVMTUFrR0ExVUVDQXdDVFVReEZUQVRCZ05WQkFjTURFOTNhVzVuY3lCTmFXeHNjekVWTUJNRwpBMVVFQ2d3TVVFRlBVMGxPSUV4UFEwRk1NVUV3UHdZRFZRUUxERGhRUVU5VFNVNElDQWdJQ0FoSlZCdGJNMzRiCld6TitHMXN6Zmh0YlF4dGJReHRiUXh0YlF4dGJRd2dJQ0FnSUNBaFFUd2hCVDFOSlRqRVZNQk1HQTFVRUF3d00KVUVGUFUwbE9JRXhQUTBGTU1SNHdIQVlKS29aSWh2Y05BUWtCRmc5bVpXMXBRSEJoYjNOcGJpNWpiMjB3SGhjTgpNVGt3TlRBMU1qRTBORFV4V2hjTk1qUXdOVEF6TWpFME5EVXhXakNCbWpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKCkJnTlZCQWdNQWsxRU1SVXdFd1lEVlFRSERBeFBkMmx1WjNNZ1RXbHNiSE14RlRBVEJnTlZCQW9NREZCQlQxTkoKVGlCTVQwTkJUREVQTUEwR0ExVUVDd3dHUkVWV1QxQlRNU0F3SGdZRFZRUUREQmQwY21GbFptbHJMWFZwTG5CaApiM05wYmk1c2IyTmhiREVkTUJzR0NTcUdTSWIzRFFFSkFSWU9lVzkxY2tCbGJXRnBiQzVqYjIwd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESVIrUFM4dG5LYThuU0V4S3BKQlM0RC83WGtPa1AKQmcrYkpaQWV0eXdXN2ZORWpEWWxDeWZuempXdmltajAyUXBoby81OVBMY0c3bHlYUjdMWUNHMnNIMmZvRjZtSApUMm55dXpqeDlFakZETkYzaHN4Uit2akZlMHRrd29ieXJPam5qcXptWjFlZk1oT04yNkFLREJueTErUWYrOGhWCkw2dlNLRmViaE0xbEN0d29VVU5aNUJQcUtkbHRLMjhuN2pXdlh0RGt4Q1FBTnZDNUVFUndDZFlGY2lGL2dCakkKc3pKK2YzZkxGSjF4MmhVOXppd1J3R2JMb0lmOWE5b0UrUlhXZ0NrWVFyZ2c3NFFaZ093TjBvM1VKVVVPQ2JONQpxM0pNVTN3QmlzejVlR01lSzFSUDRaV2JhZ2Fxa244aGt2bUpuNUFqa3hDZ1Zuc1I4dVg5Wlk0YkFnTUJBQUdqClh6QmRNQjhHQTFVZEl3UVlNQmFBRk9WU2hxL01DdTFuVE1JTFpNWDRNTTRqUUlNbE1Ba0dBMVVkRXdRQ01BQXcKQ3dZRFZSMFBCQVFEQWdUd01DSUdBMVVkRVFRYk1CbUNGM1J5WVdWbWFXc3RkV2t1Y0dGdmMybHVMbXh2WTJGcwpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURQL3ZialowUHg4bnpJOTZmTGZkR1BnaWpVZ2tRRUs3dEdZeDIzCm44SHpDSXMydGVJbndjd213aE5NQmpaZHo4MDJha01BanZLZGZOT1dOT3UrT3FtSkZVR1doa2pKemcvVmFGeE4KWDhmUngwdTFtSXFMMmJDeVR6V2xyQXM1ZXlWL3NMN3d3SWVqczkwaEVVU3RQZHA4SzV2UnZndXdoUlFJMGNFZgpjR3JXK3gvVWVvdXNpaFhGdDBHcUhqSzFlS29qRndzdmlFQWJzNjFaZDd6RkdKbkQrQk9QYks4cjU4YXFQV2x4ClhkOFdDWUtNMFVESGd0SEVCSVFFS0FwN0RSMElIT01peVpzOXVPS2FlU1lyalczMWoyUG9YVFBPR0YwakVZeEIKaG8wbHR0ZXo1Ylg3azNjK3cxTEk3SzNQQ0lZeGZWb3VIZmRoczk1SEhBMVBYQUxLCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRRElSK1BTOHRuS2E4blMKRXhLcEpCUzRELzdYa09rUEJnK2JKWkFldHl3VzdmTkVqRFlsQ3lmbnpqV3ZpbWowMlFwaG8vNTlQTGNHN2x5WApSN0xZQ0cyc0gyZm9GNm1IVDJueXV6ang5RWpGRE5GM2hzeFIrdmpGZTB0a3dvYnlyT2puanF6bVoxZWZNaE9OCjI2QUtEQm55MStRZis4aFZMNnZTS0ZlYmhNMWxDdHdvVVVOWjVCUHFLZGx0SzI4bjdqV3ZYdERreENRQU52QzUKRUVSd0NkWUZjaUYvZ0JqSXN6SitmM2ZMRkoxeDJoVTl6aXdSd0diTG9JZjlhOW9FK1JYV2dDa1lRcmdnNzRRWgpnT3dOMG8zVUpVVU9DYk41cTNKTVUzd0Jpc3o1ZUdNZUsxUlA0WldiYWdhcWtuOGhrdm1KbjVBamt4Q2dWbnNSCjh1WDlaWTRiQWdNQkFBRUNnZ0VBZFROVWg2cGpkb2Z6RjRMZnhhaitrdU9SWHZaRzIrclJFUm8vSnlwTG03TnQKU3l5OXRwbTdwWFBQaU1UM1BHa1NJU2RGa21ZSU9QOGRvYzFzUSsxU3VJbThWVjRiYjdveUpzQVd4OGdMR1h5eAp5ejlQcTUyeEhHZFZMRWFGajlkTmg4dS9OQ2svWmtKNG5PZnIxRlZXamZ4Mlc1ME1rNFVOQ0ROaGFQbWk5RUFJCk9NMGhob0pMUUFzK05lM0UwQ25nd0JNVkQzalgvOG5XNXMrN0ZwMUNvQ3IwTDFCbkF3N3hWUWJseEhtYjZjcmIKVm9MWWp6TEVPcTJiR1JiSWUrL29VZnZuekxGNm50OVJaLytya3YrVG5Zb3daZ2hzMExxQ0pQTU9NdGppY2NvYgpUNEhsaFhrZ3l2L0lrSnNZbFFhbDdhSnRGVVFYeVViYm50ZnJmZ0JWRVFLQmdRRHZ5ZW15UUJXTHZWYmxEek43Ci84TVdaLzhXRHN3enkwcmU3MkZ4NldCM09ZOUJRQ0ZmVnBvVE42aThiUzFZdWkydUt1YXF3YVptb01JbVYzRUUKMG5ObHQ2VzJFMjhWMVFwdk00MlR4TW4xQnZlQzJXOTcxYUlpS3EwcTdRR1ZpL2RCeEJqZlU5dityNG1CUkRxWQpob21URDRsWEFDNnlIS2xPWDk5OXlkZVN1UUtCZ1FEVjBqUUxxTnR2eWRQb1RCUkdQSmk0L1JTTDI5MERudURnCmxLaGVQZlFDdDFEdGFNSklXRS9zUHNEczZnb3A2RUhKSktpNWUvbXlVejNGZFM5YzJId1dXNzRyQU1KNFVGcXkKVDNIVjloRVRzcERyUElITE9tTFZzdVo5cnpndzhRL2J3SlRlcnZ4aDkxL2hQYlVFdEFVNDBSYTdma2x3NzNhSgo5T1FMVzFWTmN3S0JnRzRmbXRZa0hFRUsrYWRFN2U0YXJldlNZeElzUlpmYjIweTdQMU5qVE13MGdSZ0ViYzh0CkpLR0N4Rm1WQW1oblNLZGVTSVZQWGk1djBmcHQyaGZPMXZSMS9RSzd0aDZlc3FZVFZRZnlMcFg3Vnh5ZTQxWkoKN0tZb1YxTUplZHJHWncyckU0a3RLREcxU0Q4M3FIbDRBQ0tyMWZWQXZqRktmRzdrRk8zZURzVHhBb0dBZnZSUAo4cHhQcmhBbndjVnFSRW0yWkIvZ0V5cDRENjVGMXhKczVZZmpXYmwrVTNmZjR4U01YN2ppMDhnaVFMK21UOGQwClpxMDFsS3ZZQVdXU3VZM1FIM1paY3k4QVNHOXRhbkhCSlVqMDJyMHJUb0Nla0F3YW9zZVdFd24yVXhqT1Vhd0cKdURFdHFQMDM4SVN5OWhmdEFjOGpzQzlMYThMQ255YklQL1g2c0FFQ2dZQkw0T2tFZ2JpOS9Bb0ZvdjBBQWp0VApaNnBjQTBjK1RodC8vVjBMZWpFRlFoVU0yeXp5azAyUzZtN1kwcVh0c05tbHZESkg5eXAxR2tKZEt2K0xVT3MwCmt1Z0R6UXoyTVhNaTRSa25iTW9ETGRHQVdnUUV0ZFU4YTE5V1F1OW1FOU5zNWk0dEpkVTEzZEwrSmdyMW5LR2cKdEJKVWYwZ1BvM05LY3I2TTJLYlA2UT09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  creationTimestamp: null
  name: tls-secret
  namespace: default
type: kubernetes.io/tls

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --default-ssl-certificate=default/tls-secret
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2020-05-01T01:16:50Z"
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:loadBalancer:
          f:ingress: {}
    manager: controller
    operation: Update
    time: "2020-05-01T01:16:50Z"
  name: nginx-ingress-controller
  namespace: ingress-nginx
  resourceVersion: "420584"
  selfLink: /api/v1/namespaces/ingress-nginx/services/nginx-ingress-controller
  uid: afc782d8-16dc-4bf4-a344-05a13b5bb41e
spec:
  clusterIP: 10.104.4.237
  externalTrafficPolicy: Cluster
  ports:
  - name: port-1
    nodePort: 32248
    port: 80
    protocol: TCP
    targetPort: 80
  - name: port-2
    nodePort: 30899
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  sessionAffinity: None
  type: LoadBalancer

